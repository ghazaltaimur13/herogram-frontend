{"version":3,"file":"static/js/144.ba76cf92.chunk.js","mappings":"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","sources":["constants/ApiConstants.js","pages/SignupPage/SignupPage.js","store/features/authApiSlice.js"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport const API_ROUTES = {\n    LOGIN: '/login',\n    UPLOAD_FILE: '/uploadFile',\n    READ_FILE: '/readFiles',\n    TRACK_FILE: '/trackFiles',\n    SIGNUP: '/signup',\n  };\n  ","// pages/SignupPage/SignupPage.js\nimport React, { useState } from 'react';\nimport {\n  TextField,\n  Button,\n  Container,\n  Typography,\n  Paper,\n  Box,\n  Alert,\n  Stack\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useSignupMutation } from '../../store/features/authApiSlice'; // Update this according to your API slice\nimport { useAppDispatch } from '../../store/hooks';\nimport { setAccessToken } from '../../store/features/baseSlice';\n\nexport default function SignupPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const dispatch = useAppDispatch();\n\n  const [signupData, { isError, error: errorResp }] = useSignupMutation();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // Basic validation\n    if (!email || !password) {\n      setError('Both fields are required.');\n      return;\n    }\n\n    setError('');\n    setSuccessMessage('');\n\n    const signupResponse = await signupData({ email, password });\n    if (signupResponse.data && signupResponse.data.accessToken) {\n      dispatch(setAccessToken(signupResponse.data.accessToken));\n      setSuccessMessage('Signup successful! You can now log in.');\n    }\n  };\n\n  return (\n    <Stack\n    direction=\"row\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    sx={{\n      minHeight: {\n        xs: 'calc(100vh)',\n        marginTop: '-5rem',\n      },\n    }}\n  >\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Paper elevation={3} sx={{ padding: 3 }}>\n        <Typography variant=\"h5\" component=\"h1\" align=\"center\">\n          Signup\n        </Typography>\n        <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\n          {error && (\n            <Typography color=\"error\" variant=\"body2\" align=\"center\">\n              {error}\n            </Typography>\n          )}\n          {successMessage && (\n            <Typography color=\"primary\" variant=\"body2\" align=\"center\">\n              {successMessage}\n            </Typography>\n          )}\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Email Address\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            autoFocus\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            sx={{ mt: 2 }}\n          >\n            Signup\n          </Button>\n        </Box>\n        {errorResp && isError && (\n          <Alert icon={<CloseIcon fontSize=\"inherit\" />} severity=\"error\">\n            {errorResp.data.error || 'Something went Wrong'}\n          </Alert>\n        )}\n      </Paper>\n    </Container>\n    </Stack>\n  );\n}\n","import { API_ROUTES } from '../../constants/ApiConstants';\nimport { apiSlice } from '../api/apiSlice';\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    login: builder.mutation({\n      query: (data) => ({\n        url: `${API_ROUTES.LOGIN}`,\n        method: 'POST',\n        body: data,\n      }),\n      transformResponse: (response) => response,\n    }),\n    signup: builder.mutation({\n      query: (data) => ({\n        url: `${API_ROUTES.SIGNUP}`,\n        method: 'POST',\n        body: data,\n      }),\n      transformResponse: (response) => response,\n    }),\n  }),\n});\n\nexport const { useLoginMutation, useSignupMutation } = authApiSlice;\n"],"names":["API_ROUTES","LOGIN","UPLOAD_FILE","READ_FILE","TRACK_FILE","SIGNUP","SignupPage","email","setEmail","useState","password","setPassword","error","setError","successMessage","setSuccessMessage","dispatch","useAppDispatch","signupData","isError","errorResp","useSignupMutation","_jsx","Stack","direction","alignItems","justifyContent","sx","minHeight","xs","marginTop","children","Container","component","maxWidth","_jsxs","Paper","elevation","padding","Typography","variant","align","Box","onSubmit","async","event","preventDefault","signupResponse","data","accessToken","setAccessToken","mt","color","TextField","margin","required","fullWidth","label","type","value","onChange","e","target","autoFocus","Button","Alert","icon","CloseIcon","fontSize","severity","authApiSlice","apiSlice","injectEndpoints","endpoints","builder","login","mutation","query","url","method","body","transformResponse","response","signup","useLoginMutation"],"sourceRoot":""}